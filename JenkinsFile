// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: shell
    image: taylorsilva/carvel-apps
    command:
    - sleep
    args:
    - infinity
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'shell'
        }
    }
    stages {
        stage('checkout'){
            environment { 
                GIT_AUTH = credentials('f09786ed-8c24-4d1a-a768-f0b5266383be') 
            }
            steps{
                container('jnlp'){
                    sh('''
                        git config --global credential.helper "!f() { echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }; f"
                        git config --global user.email "nitashav@vmware.com"
                        git config --global user.name "nitashav-vmw"
                        git clone https://github.com/nitashav-vmw/spring-petclinic-config.git
                        git clone https://github.com/nitashav-vmw/spring-base.git
                    ''')
                }
            }
        }
        stage('overlay') {
            steps {
              sh('''
              ls .
              ytt -f ./spring-base/k8s -f ./spring-petclinic-config/k8s/values.yaml > all.yml
              cat all.yml
              ls . 
              ''') 
             
            }
        }
    }
}
